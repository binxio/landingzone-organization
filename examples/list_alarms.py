#!/usr/bin/env python3
import os
from itertools import groupby

from cloudwatch import CloudWatch
from landingzone_organization import Profiles, Organization

# Make sure we are using the config file that is generated by the CLI
config_file = os.environ.get("AWS_CONFIG_FILE")

# Select the regions that you want to query
regions = [
    "eu-central-1",
    # "eu-west-1",
    # "us-east-1",
]

if not config_file:
    print("AWS_CONFIG_FILE not set, make sure you set it!")
    exit(1)

# We load the previously stored organization state
with open("organization-data.json", "r") as fh:
    organization = Organization.load(fh.read())

# Instantiate the adapter that holds the logic
adapter = CloudWatch()

# Use a callback mechanism to invoke the `get_alarms` method for each profile and region
executor = Profiles(config_file)
executor.execute(regions, adapter.get_alarms)

# You might not have access to all roles, so we will list all the failed items first
print("Exceptions:")
for client_exception in executor.client_exceptions:
    print(
        f"\t{client_exception} failed due to: {executor.client_exceptions[client_exception]}"
    )

# We are only interested in the alarms that are in an alarm state
alarms_in_alarm_state = filter(lambda x: x.alarm, adapter.alarms)

# Group alarms per account_id
alarms_per_account = {
    k: list(g) for k, g in groupby(alarms_in_alarm_state, key=lambda k: k.account_id)
}

# List all alarms that are in an alarm state
print("")
print("Alarms:")
for account_id in alarms_per_account:
    # Lookup the account information based on id
    account = organization.by_account_id(account_id)
    print(
        f"\t{account.name} (Account ID: {account.account_id} Environment: {account.environment})"
    )

    for alarm in alarms_per_account[account_id]:
        print(f"\t\t{alarm}")
