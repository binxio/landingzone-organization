name: Continuous Integration
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

jobs:

#  ci:
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: [3.9]
#        os: [ubuntu-latest]
#    runs-on: ${{ matrix.os }}
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - uses: Gr1N/setup-poetry@v8
#        with:
#          poetry-version: "1.4.0"
#      - uses: actions/cache@v2
#        with:
#          path: ~/.cache/pypoetry/virtualenvs
#          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
#      - run: poetry --version
#      - name: Prepare variables
#        id: vars
#        run: |
#          echo "version=$(awk '/^version/{print $NF}' pyproject.toml | sed 's/\"//g')" >> $GITHUB_OUTPUT
#          echo "project=$(awk '/^name/{print $NF}' pyproject.toml | sed 's/\"//g' | sed 's/-/_/g')" >> $GITHUB_OUTPUT
#      - name: Install dependencies
#        run: make install
#      - name: Run check
#        run: make test
#      - name: Run complexity baseline
#        run: make complexity
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v2
#        with:
#          fail_ci_if_error: true
#          token: ${{ secrets.CODECOV_TOKEN }}
#          files: ./reports/coverage.xml
#      - name: Code Coverage Summary Report
#        uses: irongut/CodeCoverageSummary@v1.1.0
#        with:
#          filename: reports/coverage.xml
#          badge: true
#          fail_below_min: true
#          format: markdown
#          output: both
#          thresholds: 95 100

  Quality:
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.4.0
      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true
      - name: View poetry version
        run: poetry --version
      - name: Install dependencies
        run: |
          python -m poetry install
      - name: Run check
        run: make test
      - name: Run complexity baseline
        run: make complexity

  Release:
    needs: Quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Semantic Release
        run: |
          pip install python-semantic-release
          git config user.name github-actions
          git config user.email github-actions@github.com
          semantic-release publish
